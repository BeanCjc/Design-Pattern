目的:保证一个类仅有一个实例,并提供一个该实例的全局访问点
定义了三种单例模式:
Singleton_SingleThread为单线程单例模式,不支持多线程;
Singleton_MultiThread为多线程单例模式;
Singleton_StaticConstruction以静态构造函数来定义的单例模式,支持多线程,写法简单
优点:
	实例控制:Singleton会阻止其他对象实例化其自己的Singleton对象的副本,从而确保所有对象都访问唯一的实例
	灵活性:因为控制了类的实例化过程,所以类可以更加灵活修改实例化过程
缺点:
	开销:虽然数量很少,但如果每次对象请求引用时都要检查是否存在类的实例,将扔需要一些开销.可以通过使用静态初始化来解决此问题,也就是第三种单例模式(Singleton_StaticConstruction)
	可能的开发混淆:使用Singleton对象(尤其在类库定义的对象)时,开发人员必须记住自己不能用new关键字来初始化对象
	对象的生命周期:Singleton不能解决删除单个对象的问题.因为他包含对该对象的私有字段的引用,静态字段是不能被CLR回收内存的,该实例和应用程序的生命周期一样长,一直存在。
使用场合:
	当类只能有一个实例且客户端可以从一个众所周知的访问点访问它时
	当这个唯一实例应该是通过子类化可扩展的,并且客户端应该无需改代码就能使用一个扩展的实例时